{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { createUserWithEmailAndPassword, getAuth, GoogleAuthProvider, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut } from \"firebase/auth\";\nimport { useEffect, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport initializeAuthentication from \"../Firebase/firebase.init\"; // initialize toastify\n\ntoast.configure(); //initializing firebase\n\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  _s();\n\n  // autentication states\n  const [user, setUser] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [admin, setAdmin] = useState(false);\n  const auth = getAuth();\n  const googleProvider = new GoogleAuthProvider(); // cheking admin locally\n\n  const checkAdmin = user => {\n    console.log(user.email);\n\n    if (user.email === \"admin@gmail.com\") {\n      setAdmin(true);\n    } else {\n      setAdmin(false);\n    }\n  }; // sign in with google\n\n\n  const signinWithGoogle = () => {\n    setIsLoading(true);\n    return signInWithPopup(auth, googleProvider);\n  }; // sign up with email\n\n\n  const signUpUsingEmailAndPass = (email, password, name) => {\n    return createUserWithEmailAndPassword(auth, email, password);\n  }; //    sign in with email and password\n\n\n  const signInWithEmail = (email, password) => {\n    return signInWithEmailAndPassword(auth, email, password);\n  }; // save user details for after register\n\n\n  const saveUser = (email, displayName) => {\n    const user = {\n      email: email,\n      displayName: displayName\n    };\n    console.log(user);\n    axios.post(\"http://localhost:3000/users\", user).then(res => console.log(res.data)).catch(err => alert(\"error in db\" + err.response));\n  }; // setting up an observer\n\n\n  useEffect(() => {\n    setIsLoading(true);\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n        checkAdmin(user);\n      } else {\n        setUser({});\n      }\n\n      setIsLoading(false);\n    });\n  }, []); // cheking if the user is admin or not\n\n  useEffect(() => {\n    axios.get(`https://localhost:3000/users/${user.email}`).then(res => setAdmin(res.data.admin));\n  }, [user.email]); // show message on logout\n\n  const notify = () => {\n    toast.info(\"Logout succesffull!\", {\n      position: \"top-right\",\n      autoClose: 4000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined\n    });\n  }; // logout authentication\n\n\n  const logOut = () => {\n    setIsLoading(true);\n    signOut(auth).then(() => {\n      // notify();\n      alert('Sign-out successful');\n      setUser({});\n    }).catch(error => {}).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  return {\n    user,\n    setUser,\n    signinWithGoogle,\n    signUpUsingEmailAndPass,\n    signInWithEmail,\n    logOut,\n    isLoading,\n    setIsLoading,\n    admin,\n    saveUser,\n    setAdmin,\n    notify\n  };\n};\n\n_s(useFirebase, \"wk0P34KKrnIOuQmaZGCuhHstwpA=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["D:/B.IIUC/Varsity Project for github/Real Estate Front End/src/hooks/useFirebase.js"],"names":["axios","createUserWithEmailAndPassword","getAuth","GoogleAuthProvider","onAuthStateChanged","signInWithEmailAndPassword","signInWithPopup","signOut","useEffect","useState","toast","initializeAuthentication","configure","useFirebase","user","setUser","isLoading","setIsLoading","admin","setAdmin","auth","googleProvider","checkAdmin","console","log","email","signinWithGoogle","signUpUsingEmailAndPass","password","name","signInWithEmail","saveUser","displayName","post","then","res","data","catch","err","alert","response","get","notify","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","logOut","error","finally"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  getAuth,\r\n  GoogleAuthProvider,\r\n  onAuthStateChanged,\r\n  signInWithEmailAndPassword,\r\n  signInWithPopup,\r\n  signOut,\r\n} from \"firebase/auth\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport initializeAuthentication from \"../Firebase/firebase.init\";\r\n\r\n// initialize toastify\r\ntoast.configure();\r\n//initializing firebase\r\ninitializeAuthentication();\r\nconst useFirebase = () => {\r\n  // autentication states\r\n  const [user, setUser] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [admin, setAdmin] = useState(false);\r\n  const auth = getAuth();\r\n  const googleProvider = new GoogleAuthProvider();\r\n\r\n  // cheking admin locally\r\n  const checkAdmin = (user) => {\r\n    console.log(user.email);\r\n    if (user.email === \"admin@gmail.com\") {\r\n      setAdmin(true);\r\n    } else {\r\n      setAdmin(false);\r\n    }\r\n  };\r\n\r\n  // sign in with google\r\n  const signinWithGoogle = () => {\r\n    setIsLoading(true);\r\n    return signInWithPopup(auth, googleProvider);\r\n  };\r\n  // sign up with email\r\n  const signUpUsingEmailAndPass = (email, password, name) => {\r\n    return createUserWithEmailAndPassword(auth, email, password);\r\n  };\r\n  //    sign in with email and password\r\n  const signInWithEmail = (email, password) => {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n  };\r\n  // save user details for after register\r\n  const saveUser = (email, displayName) => {\r\n    const user = { email: email, displayName: displayName };\r\n    console.log(user);\r\n    axios\r\n      .post(\"http://localhost:3000/users\", user)\r\n      .then((res) => console.log(res.data))\r\n      .catch((err) => alert(\"error in db\" + err.response));\r\n  };\r\n  // setting up an observer\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        setUser(user);\r\n        checkAdmin(user);\r\n      } else {\r\n        setUser({});\r\n      }\r\n      setIsLoading(false);\r\n    });\r\n  }, []);\r\n  // cheking if the user is admin or not\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://localhost:3000/users/${user.email}`)\r\n      .then((res) => setAdmin(res.data.admin));\r\n  }, [user.email]);\r\n\r\n  // show message on logout\r\n  const notify = () => {\r\n    toast.info(\"Logout succesffull!\", {\r\n      position: \"top-right\",\r\n      autoClose: 4000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  };\r\n  // logout authentication\r\n  const logOut = () => {\r\n    setIsLoading(true);\r\n    signOut(auth)\r\n      .then(() => {\r\n        // notify();\r\n       alert('Sign-out successful') \r\n        setUser({});\r\n      })\r\n      .catch((error) => {})\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n  return {\r\n    user,\r\n    setUser,\r\n    signinWithGoogle,\r\n    signUpUsingEmailAndPass,\r\n    signInWithEmail,\r\n    logOut,\r\n    isLoading,\r\n    setIsLoading,\r\n    admin,\r\n    saveUser,\r\n    setAdmin,\r\n    notify\r\n  };\r\n};\r\nexport default useFirebase;"]},"metadata":{},"sourceType":"module"}